#line 2 "2005018.cpp"

#line 4 "2005018.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[238] =
    {   0,
       27,    2,   56,   56,    0,    0,   64,   64,    0,    0,
        0,    0,    0,    0,   71,   71,    0,    0,    0,    0,
       75,   75,    0,    0,    0,    4,   89,   88,    1,   36,
       55,   85,   86,   30,   88,   82,   37,   38,   10,   43,
       11,   79,   30,   26,   44,   48,   33,   49,   84,   54,
       27,   41,   83,   42,   47,   54,   54,   54,   27,   54,
       54,   54,   54,   54,   54,   39,   88,   40,    2,    3,
       56,   58,   57,   61,   60,   59,   64,   88,   66,   67,
       65,   62,   63,   71,   88,   72,   73,   74,   75,   88,
       77,   76,    6,    7,    4,    5,   52,   34,   82,   82,

       29,   82,   32,   31,   80,   26,   27,   79,   79,   27,
       87,   79,   69,   70,   78,   26,   27,   45,   50,   53,
       51,   46,   54,   27,   80,   27,   54,   54,   54,   54,
       54,   13,   54,   54,   54,    8,   54,   54,   54,   54,
       54,   35,    2,    3,   56,    0,   57,   59,   64,    0,
       65,   71,    0,   75,    0,    4,    5,   82,   28,   82,
       82,   82,   27,   27,    0,   79,   79,   79,   79,   27,
       27,   87,   79,   79,   69,   69,   78,   27,   80,   54,
       54,   54,   54,   54,   54,   54,   54,   12,   14,   54,
       54,   54,   54,   81,   28,   82,   79,   79,   79,   79,

       80,   27,   27,   68,   54,   24,   21,   54,   54,   54,
        9,   54,   54,   54,   16,   54,   81,   79,   79,   27,
       20,   54,   54,   54,   15,   54,   54,   19,   54,   54,
       22,   23,   17,   54,   18,   25,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   22,   27,   28,   28,   28,   28,   29,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,   33,   34,   22,   35,   36,   37,   38,

       39,   40,   28,   41,   42,   28,   43,   44,   28,   45,
       46,   28,   28,   47,   48,   49,   50,   51,   52,   28,
       28,   28,   53,   54,   55,   22,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    5,    5,    6,    7,
        7,    1,    1,    1,    1,    1,    1,    7,    7,    1,
        1,    1,    1,    5,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1
    } ;

static const flex_int16_t yy_base[254] =
    {   0,
        0,   54,   54,   56,   58,   60,   62,   64,   66,   68,
      483,  482,  481,  480,   70,   72,   73,   74,  479,  478,
       75,   76,   77,   78,   80,  108,  480,  487,  487,  454,
      487,  487,  487,  487,  468,  112,  487,  487,  462,  487,
      100,  107,  112,  124,  487,  110,  451,  122,  487,    0,
      134,  487,  487,  487,  487,  428,  115,   76,  430,   42,
      117,  434,  420,  425,  429,  487,  415,  487,   88,   92,
      437,  487,  109,  487,  487,  436,  435,  416,  487,  487,
      433,  487,  487,  432,  413,  487,  487,  487,  430,  411,
      487,  487,  487,  487,   96,  163,  487,  487,    0,  448,

      487,  157,  487,  487,  152,  158,  165,  170,  195,  199,
        0,  206,  444,  487,  212,  439,  222,  487,  487,  487,
      487,  487,    0,  180,  139,  172,  417,  407,  419,  408,
      412,  401,  402,  403,  401,    0,  398,  397,  403,  402,
      401,  487,  192,  201,  410,  383,  399,  392,  385,  361,
      378,  372,  353,  368,  343,  242,  243,  336,  487,  487,
      334,  153,  232,  236,  154,  240,  247,  245,  260,  326,
      255,    0,  215,  228,  329,  268,  273,  256,  265,  307,
      302,  293,  290,  302,  299,  293,  289,    0,    0,  269,
      264,  274,  262,  487,  487,  290,  275,  277,  282,  287,

      289,  297,  302,  487,  249,    0,    0,  246,  233,  215,
        0,  206,  184,  188,    0,  183,  207,  307,  309,  313,
        0,  169,  166,  168,    0,  150,  140,    0,  121,   89,
        0,    0,    0,   91,    0,    0,  487,  348,  355,  362,
      369,  376,  383,  390,  393,  112,  400,  407,  414,  421,
      428,   95,  435
    } ;

static const flex_int16_t yy_def[254] =
    {   0,
      237,    1,  238,  238,  239,  239,  240,  240,  239,  239,
      239,  239,  239,  239,  241,  241,  239,  239,  239,  239,
      242,  242,  239,  239,  243,  243,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  244,  237,  237,  237,  237,
      237,  245,  237,  245,  237,  237,  237,  237,  237,  246,
      246,  237,  237,  237,  237,  246,  246,  246,   51,  246,
      246,  246,  246,  246,  246,  237,  237,  237,  237,  237,
      247,  237,  237,  237,  237,  237,  248,  237,  237,  237,
      237,  237,  237,  249,  237,  237,  237,  237,  250,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  251,  251,

      237,  251,  237,  237,  245,   44,  237,  237,  237,   44,
      252,  252,  253,  237,   44,   44,  252,  237,  237,  237,
      237,  237,  246,  237,  237,   51,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  237,  237,  237,  247,  237,  237,  237,  248,  237,
      237,  249,  237,  250,  237,  237,  237,  251,  237,  237,
      251,  251,   44,  237,  237,  237,  237,  237,  237,  110,
      117,  252,  237,  252,  253,  253,  245,  117,  237,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  237,  237,  251,  237,  237,  237,  237,

      237,  237,  252,  237,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  237,  237,  237,  237,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,    0,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237
    } ;

static const flex_int16_t yy_nxt[543] =
    {   0,
       28,   28,   29,   28,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   34,   39,   40,   41,   42,   43,   44,
       44,   28,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   50,   50,   56,   57,   58,   59,   60,
       50,   61,   50,   50,   50,   50,   62,   63,   50,   50,
       64,   65,   66,   67,   68,   69,   28,   70,   28,   72,
       74,   72,   74,   75,   28,   75,   28,   28,   79,   28,
       79,   80,   28,   80,   28,   86,   86,   28,   28,   91,
       91,   28,   94,   28,   73,  134,   73,  135,   76,  143,
       76,  144,   78,  144,   78,  144,   81,  156,   81,  157,

       85,  172,   85,   87,   87,   90,   90,   92,   92,   95,
       94,   96,   99,   99,  131,   99,  104,  105,  123,  106,
      106,  132,  101,  108,  109,  113,  110,  110,  107,  236,
      114,   99,   99,  118,  119,  112,   99,  235,  107,  147,
      237,  115,  102,  116,  116,  112,  121,  122,  124,  128,
      124,  125,  117,  126,  126,  129,  136,  145,  179,  179,
      130,  137,  117,  194,  157,   99,  157,  160,  237,  237,
      234,  163,  163,  197,  197,  105,  161,  106,  106,  124,
      233,  124,  125,  196,  164,  164,  237,  165,  237,  166,
      166,  161,  161,  143,  232,  144,  161,  125,  167,  164,

      164,  161,  144,  161,  144,  161,  231,  161,  167,  230,
      162,  108,  109,  229,  168,  168,  169,  159,  170,  170,
      173,  228,  173,  167,  227,  174,  174,  171,  108,  109,
      226,  110,  110,  167,  198,  198,  124,  171,  124,  125,
      112,  178,  178,  156,  157,  157,  157,  174,  174,  125,
      112,  163,  163,  125,  225,  164,  164,  165,  224,  166,
      166,  173,  109,  173,  199,  199,  198,  198,  167,  202,
      237,  202,  237,  167,  203,  203,  108,  109,  167,  200,
      200,  176,  223,  167,  179,  179,  204,  222,  167,  237,
      237,  221,  163,  163,  197,  197,  198,  198,  167,  165,

      217,  199,  199,  167,  109,  216,  218,  218,  219,  219,
      167,  215,  214,  167,  125,  167,  220,  220,  213,  125,
      167,  203,  203,  212,  165,  167,  218,  218,  219,  219,
      125,  211,  220,  220,  210,  167,  209,  167,  208,  207,
      206,  205,  176,  201,  195,  167,  194,  167,   71,   71,
       71,   71,   71,   71,   71,   28,   28,   28,   28,   28,
       28,   28,   77,   77,   77,   77,   77,   77,   77,   84,
       84,   84,   84,   84,   84,   84,   89,   89,   89,   89,
       89,   89,   89,   93,   93,   93,   93,   93,   93,   93,
      100,  154,  100,  100,  100,  100,  100,  111,  155,  111,

      145,  152,  153,  145,  145,  145,  145,  149,  151,  149,
      149,  149,  149,  149,  152,  150,  152,  152,  152,  152,
      152,  154,  148,  154,  154,  154,  154,  154,  158,  147,
      158,  145,  158,  158,  158,  175,  175,  175,  175,  175,
      146,  175,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  177,  176,  159,  154,
      155,  152,  153,  151,  149,  150,  148,  146,  142,  141,
      140,  139,  138,  133,  127,  120,  103,   98,   97,  237,
       88,   88,   83,   83,   82,   82,   27,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237
    } ;

static const flex_int16_t yy_chk[543] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    2,    4,    3,
        5,    4,    6,    5,    7,    6,    8,    7,    9,    8,
       10,    9,   15,   10,   16,   17,   18,   21,   22,   23,
       24,   25,   25,   25,    3,   60,    4,   60,    5,   69,
        6,   69,    7,   70,    8,   70,    9,   95,   10,   95,

       15,  252,   16,   17,   18,   21,   22,   23,   24,   26,
       26,   26,   36,   36,   58,   36,   41,   41,  246,   41,
       41,   58,   36,   42,   42,   43,   42,   42,   41,  234,
       43,   36,   36,   46,   46,   42,   36,  230,   41,   73,
       44,   44,   36,   44,   44,   42,   48,   48,   51,   57,
       51,   51,   44,   51,   51,   57,   61,   73,  125,  125,
       57,   61,   44,  162,   96,   36,   96,  102,  105,  105,
      229,  105,  105,  165,  165,  106,  102,  106,  106,  107,
      227,  107,  107,  162,  107,  107,  126,  108,  126,  108,
      108,  102,  102,  143,  226,  143,  102,  124,  108,  124,

      124,  102,  144,  102,  144,  102,  224,  102,  108,  223,
      102,  109,  109,  222,  109,  109,  110,  217,  110,  110,
      112,  216,  112,  109,  214,  112,  112,  110,  115,  115,
      213,  115,  115,  109,  173,  173,  117,  110,  117,  117,
      115,  117,  117,  156,  157,  156,  157,  174,  174,  163,
      115,  163,  163,  164,  212,  164,  164,  166,  210,  166,
      166,  167,  168,  167,  168,  168,  167,  167,  166,  171,
      178,  171,  178,  168,  171,  171,  169,  169,  166,  169,
      169,  176,  209,  168,  179,  179,  176,  208,  169,  177,
      177,  205,  177,  177,  197,  197,  198,  198,  169,  199,

      196,  199,  199,  197,  200,  193,  200,  200,  201,  201,
      199,  192,  191,  197,  202,  200,  202,  202,  190,  203,
      199,  203,  203,  187,  218,  200,  218,  218,  219,  219,
      220,  186,  220,  220,  185,  218,  184,  219,  183,  182,
      181,  180,  175,  170,  161,  218,  158,  219,  238,  238,
      238,  238,  238,  238,  238,  239,  239,  239,  239,  239,
      239,  239,  240,  240,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  241,  241,  241,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,  243,  243,  243,  243,
      244,  155,  244,  244,  244,  244,  244,  245,  154,  245,

      247,  153,  152,  247,  247,  247,  247,  248,  151,  150,
      248,  248,  248,  248,  249,  149,  249,  249,  249,  249,
      249,  250,  148,  250,  250,  250,  250,  250,  251,  147,
      251,  146,  251,  251,  251,  253,  253,  253,  253,  253,
      145,  253,  141,  140,  139,  138,  137,  135,  134,  133,
      132,  131,  130,  129,  128,  127,  116,  113,  100,   90,
       89,   85,   84,   81,   78,   77,   76,   71,   67,   65,
       64,   63,   62,   59,   56,   47,   39,   35,   30,   27,
       20,   19,   14,   13,   12,   11,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "2005018.l"












#line 18 "2005018.l"
#include<bits/stdc++.h>
#include "2005018.h"
using namespace std;

int line_count = 1 ;
int error_count = 0;
int tabs = 0; 
int warning = 0;  

ofstream logout;
ofstream tokenout;
FILE *fin = NULL; 
SymbolTable table(10); 
string ans = ""; 
string log_ans= "";
string log_comm = ""; 

#line 677 "2005018.cpp"
#line 678 "2005018.cpp"

#define INITIAL 0
#define string_state 1
#define first_line 2
#define multi_state1 3
#define multi_state2 4
#define multi_state_new 5
#define multi_state_new2 6
#define comment1 7
#define comment2 8
#define comment3 9
#define comment4 10
#define comment5 11
#define INDENT 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 47 "2005018.l"




#line 915 "2005018.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 238 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 487 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 51 "2005018.l"
{
	line_count++;
	BEGIN INDENT; 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "2005018.l"
{
	if(yyleng != 0){
		warning++; 
		logout << "Line# " << line_count << ": warning, " << tabs << " of tabs needed but got " << yyleng <<  " tabs.\n";
	}
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "2005018.l"
{
	logout << "Line# " << line_count << ": Warning, tab requrired but got space.\n";
	warning++; 
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "2005018.l"
{
	string curr(yytext);
	if(tabs != curr.size()){
		logout << "Line# " << line_count << ": warning, " << tabs << " of tabs needed but got "<< curr.size()<<" tabs.\n"; 
		warning++; 
	} 
	BEGIN INITIAL; 
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 77 "2005018.l"
{
	cout << "here"; 
	logout << "Line# " << line_count << ": Warning, tab requrired but got space.\n"; 
	warning++;  
	BEGIN INITIAL;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "2005018.l"
{
	if(yytext[0] == '}') {
		if(tabs) tabs--; 
	}
	unput(yytext[yyleng-1]);
	if(tabs != 0){
		logout << "Line# " << line_count << ": warning, " << tabs << " of tabs needed but got 0 tabs.\n";
		warning++; 
	} 
	BEGIN INITIAL; 
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 96 "2005018.l"
{
	line_count++; 
	BEGIN INDENT; 
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "2005018.l"
{
            tokenout << "<IF, if>\n";
            logout << "Line# " << line_count << ": Token <IF> Lexeme " << yytext << " found\n";
        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 107 "2005018.l"
{
            tokenout << "<ELSE, else>\n";
            logout << "Line# " << line_count << ": Token <ELSE> Lexeme " << yytext << " found\n";
        }
	YY_BREAK
case 10:
#line 113 "2005018.l"
case 11:
YY_RULE_SETUP
#line 114 "2005018.l"
{
            tokenout << "<ADDOP, " << yytext << ">\n";
            logout << "Line# " << line_count << ": Token <ADDOP> Lexeme " << yytext << " found\n";
        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "2005018.l"
{
			tokenout << "<FOR, for>\n";
			logout << "Line# " << line_count << ": Token <FOR> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 125 "2005018.l"
{
			tokenout << "<DO, do>\n";
			logout << "Line# " << line_count << ": Token <DO> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 130 "2005018.l"
{
			tokenout << "<INT, int>\n";
			logout << "Line# " << line_count << ": Token <INT> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "2005018.l"
{
			tokenout << "<FLOAT, float>\n";
			logout << "Line# " << line_count << ": Token <FLOAT> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "2005018.l"
{
			tokenout << "<VOID, void>\n";
			logout << "Line# " << line_count << ": Token <VOID> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 144 "2005018.l"
{
			tokenout << "<SWITCH, switch>\n";
			logout << "Line# " << line_count << ": Token <SWITCH> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "2005018.l"
{
			tokenout << "<DEFAULT, default>\n";
			logout << "Line# " << line_count << ": Token <DEFAULT> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 152 "2005018.l"
{
			tokenout << "<WHILE, while>\n";
			logout << "Line# " << line_count << ": Token <WHILE> Lexeme " << yytext << " found\n"; 
		}		
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "2005018.l"
{
			tokenout << "<BREAK, break>\n";
			logout << "Line# " << line_count << ": Token <BREAK> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 160 "2005018.l"
{
			tokenout << "<CHAR, char>\n";
			logout << "Line# " << line_count << ": Token <CHAR> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 164 "2005018.l"
{
			tokenout << "<DOUBLE, double>\n";
			logout << "Line# " << line_count << ": Token <DOUBLE> Lexeme " << yytext << " found\n"; 
		}		
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 168 "2005018.l"
{
			tokenout << "<RETURN, return>\n";
			logout << "Line# " << line_count << ": Token <RETURN> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 172 "2005018.l"
{
			tokenout << "<CASE, case>\n";
			logout << "Line# " << line_count << ": Token <CASE> Lexeme " << yytext << " found\n"; 
		}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 176 "2005018.l"
{
			tokenout << "<CONTINUE, continue>\n";
			logout << "Line# " << line_count << ": Token <CONTINUE> Lexeme " << yytext << " found\n"; 
		}		
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 182 "2005018.l"
{
			    tokenout << "<CONST_INT, " << yytext << ">\n";
                logout << "Line# " << line_count << ": Token <CONST_INT> Lexeme " << yytext << " found\n";
                // insert in symbol table and print symbol table content (only non-empty buckets)
		}	
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 187 "2005018.l"
{
	tokenout << "<CONST_FLOAT, " << yytext << ">\n";
	logout << "Line# " << line_count << ": Token <CONST_FLOAT> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 192 "2005018.l"
{
	string temp(yytext);
	char c ;
	if(temp[1] == '\\'){
		if(temp[2] == 't') c =  '\t'; 
		else if(temp[2] == 'n') c = '\n'; 
		else if(temp[2] == 'r') c = '\r'; 
		else if(temp[2] == 'b') c = '\b';
		else if(temp[2] == 'a') c = '\a';
		else if(temp[2] == 'v') c = '\v';
		else if(temp[2] == 'f') c = '\f';
		else if(temp[2] == '\'') c = '\'';
		else if(temp[2] == '\\') c = '\\';
	}  
	else c = temp[1];
	tokenout << "<CONST_CHAR, " << c << ">\n"; 
	logout << "Line# " << line_count << ": Token <CONST_CHAR> Lexeme " << c << " found\n";  
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 210 "2005018.l"
{
	logout << "Error at line# " << line_count << ": EMPTY_CONST_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 216 "2005018.l"
{
	tokenout << "<MULOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <MULOP> Lexeme " << yytext << " found\n"; 
}
	YY_BREAK
case 31:
#line 222 "2005018.l"
case 32:
YY_RULE_SETUP
#line 223 "2005018.l"
{
	tokenout << "<INCOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <INCOP> Lexeme " << yytext << " found\n";
} 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 228 "2005018.l"
{
	tokenout << "<ASSIGNOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <ASSIGNOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 34:
#line 234 "2005018.l"
case 35:
YY_RULE_SETUP
#line 234 "2005018.l"
{
	tokenout << "<LOGICOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <LOGICOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 239 "2005018.l"
{
	tokenout << "<NOT, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <NOT> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 244 "2005018.l"
{
	tokenout << "<LPAREN, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <LPAREN> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 249 "2005018.l"
{
	tokenout << "<RPAREN, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RPAREN> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 254 "2005018.l"
{
	tokenout << "<LCURL, " << yytext << ">\n"; 
	table.EnterScope();
	tabs++; 
	logout << "Line# " << line_count << ": Token <LCURL> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 260 "2005018.l"
{
	tokenout << "<RCURL, " << yytext << ">\n";
	if(tabs) tabs--; 
	table.ExitScope(); 
	logout << "Line# " << line_count << ": Token <RCURL> Lexeme " << yytext << " found\n"; 
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 266 "2005018.l"
{
	tokenout << "<LSQUARE, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <LSQUARE> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 271 "2005018.l"
{
	tokenout << "<RSQUARE, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RSQUARE> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 276 "2005018.l"
{
	tokenout << "<COMMA, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <COMMA> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 281 "2005018.l"
{
	tokenout << "<SEMICOLON, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <SEMICOLON> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 286 "2005018.l"
{
	tokenout << "<BITOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <BITOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 291 "2005018.l"
{
	tokenout << "<BITOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <BITOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 296 "2005018.l"
{
	tokenout << "<BITOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <BITOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 301 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 305 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 309 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 313 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 317 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 321 "2005018.l"
{
	tokenout << "<RELOP, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <RELOP> Lexeme " << yytext << " found\n";
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 327 "2005018.l"
{
	SymbolInfo *a = new SymbolInfo(yytext,"ID");
	int cnt = 0; 
	int ind; 
	int ok = table.Insert(a,cnt,ind);
	tokenout << "<ID, " << yytext << ">\n"; 
	logout << "Line# " << line_count << ": Token <ID> Lexeme " << yytext << " found\n";
	if(ok) table.PrintAllScopeTables(logout);
	else{
		logout << "	" << yytext << " already exists in the current ScopeTable\n"; 
	}
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 341 "2005018.l"
{
	string curr(yytext);
	log_ans += curr;
	ans += curr;  
	BEGIN string_state;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 348 "2005018.l"
{
	string curr(yytext); 
	ans += curr;
	log_ans += curr; 
	BEGIN first_line;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 355 "2005018.l"
{
	string curr(yytext); 
	log_ans += curr; 
	BEGIN multi_state_new;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 361 "2005018.l"
{
	cout << "Single lined string.\n"; 
	tokenout << "<SINGLE LINE STRING, ";
	for(int i =0 ; i < ans.size();){
		if(ans[i] == '\\' && ans[i+1] == 't') { tokenout << "	"; i+=2; } 
		else { tokenout << ans[i]; ++i; } 
	}
	tokenout << ">\n"; 
	log_ans += '"';
	logout << "Line# " << line_count << ": Token <SINGLE LINE STRING> Lexeme " << log_ans << " found\n"; 
	ans = "";
	log_ans = ""; 
	BEGIN INITIAL;
}
	YY_BREAK
case YY_STATE_EOF(string_state):
#line 376 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++; 
	error_count++; 
	BEGIN INITIAL;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 386 "2005018.l"
{
	string curr(yytext); 
	log_ans += curr; 
	BEGIN multi_state_new; 
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 392 "2005018.l"
{
	cout << "Single lined string.\n"; 
	tokenout << "<SINGLE LINE STRING, ";
	for(int i =0 ; i < ans.size();){
		if(ans[i] == '\\' && ans[i+1] == 't') { tokenout << "	"; i+=2; } 
		else { tokenout << ans[i]; ++i; } 
	}
	tokenout << ">\n"; 
	log_ans += '"';
	logout << "Line# " << line_count << ": Token <SINGLE LINE STRING> Lexeme " << log_ans << " found\n"; 
	ans = "";  
	log_ans = ""; 
	BEGIN INITIAL;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 407 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++;  
	error_count++; 
	BEGIN INDENT;
}
	YY_BREAK
case YY_STATE_EOF(first_line):
#line 417 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++; 
	error_count++; 
	BEGIN INITIAL;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 428 "2005018.l"
{ 
	line_count++;
	log_ans += '\n'; 
	BEGIN multi_state1; 
}
	YY_BREAK
case YY_STATE_EOF(multi_state_new):
#line 434 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++; 
	error_count++; 
	BEGIN INITIAL;
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 444 "2005018.l"
{
	line_count++;
	log_ans += '\n'; 
	BEGIN multi_state1; 
}
	YY_BREAK
case YY_STATE_EOF(multi_state_new2):
#line 450 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++; 
	error_count++; 
	BEGIN INITIAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 460 "2005018.l"
{
	string curr(yytext); 
	ans += curr;
	log_ans+= curr;   
	BEGIN multi_state2;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 467 "2005018.l"
{
	string curr(yytext); 
	log_ans += curr;  
	BEGIN multi_state_new2;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 473 "2005018.l"
{
	cout << "Unfinished string.\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = ""; 
	line_count++; 
	error_count++;  
	BEGIN INDENT;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 483 "2005018.l"
{   
	cout << ans << "\n"; 
	cout << log_ans << "\n";
	log_ans += '"'; 
	int tot_new = 0;
	for(auto ch: log_ans){
		if(ch == '\n' ) tot_new++ ; 
	}
	tokenout<< "<MULTI LINE STRING, " << ans << ">\n";  
	logout << "Line# " << line_count - tot_new << ": Token <MULTI LINE STRING> Lexeme " << log_ans << " found\n";
	ans = ""; 
	log_ans = "";
	BEGIN INITIAL; 
}
	YY_BREAK
case YY_STATE_EOF(multi_state2):
#line 498 "2005018.l"
{
	cout << "Unfinished String.\n";
	ans = "";
	log_ans = "";
	logout << "Error at line# " << line_count << ": UNFINISHED_STRING " << log_ans << "\n"; 
	log_ans = ""; 
	ans = "";
	error_count++; 
	BEGIN INITIAL;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 509 "2005018.l"
{ 
	cout << "A multiline comment found.\n";
	cout << yytext << "\n";  
	logout << "Line# " << line_count << ": Token <MULTI LINE COMMENT> Lexeme " << yytext << " found\n";
	for(int i =0 ; yytext[i] != '\0'; ++i ){
		if(yytext[i] == '\n') line_count++; 
	}
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 518 "2005018.l"
{
	cout << "Unfinished comment. Asterisk version.\n"; 
	cout << yytext << "\n"; 
	for(int i =0 ; yytext[i] != '\0'; ++i ){
		if(yytext[i] == '\n') line_count++; 
	}
	logout << "Error at line# " << line_count << ": UNFINISHED_COMMENT " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 528 "2005018.l"
{
	string curr(yytext); 
	log_comm += curr;   
	BEGIN comment1; 
}  
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 534 "2005018.l"
{
	string curr(yytext); 
	log_comm += curr;
	BEGIN comment2;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 540 "2005018.l"
{
	cout << log_comm << "\n";
	if(log_comm.size() != 0 ) log_comm.pop_back();  
	logout << "Line# " << line_count << ": Token <SINGLE LINE COMMENT> Lexeme " << log_comm << " found\n";
	line_count++; 
	log_comm = "";
	BEGIN INDENT; 
}
	YY_BREAK
case YY_STATE_EOF(comment2):
#line 549 "2005018.l"
{
	if(log_comm.size() != 0 ) log_comm.pop_back();
	logout << "Line# " << line_count << ": Token <SINGLE LINE COMMENT> Lexeme " << log_comm << " found\n"; 
	log_comm = "";  
	BEGIN INITIAL; 
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 557 "2005018.l"
{
	log_comm += '\\';  
	BEGIN comment3;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 562 "2005018.l"
{
	log_comm += '\n';
	line_count++; 
	BEGIN comment4;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 568 "2005018.l"
{
	string curr(yytext);
	log_comm += curr; 
	BEGIN comment5;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 574 "2005018.l"
{
	log_comm += '\\'; 
	BEGIN comment3;
}
	YY_BREAK
case YY_STATE_EOF(comment5):
#line 579 "2005018.l"
{
	if(log_comm.size() != 0 ) log_comm.pop_back(); 
	logout << "Line# " << line_count << ": Token <SINGLE LINE COMMENT> Lexeme " << log_comm << " found" << endl;
	log_comm = "" ;
	BEGIN INITIAL; 
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 586 "2005018.l"
{
	if(log_comm.size() != 0 ) log_comm.pop_back();
	int tot_new = 0; 
	for(auto ch : log_comm){
		if( ch == '\n') tot_new++; 
	} 
	logout << "Line# " << line_count - tot_new << ": Token <SINGLE LINE COMMENT> Lexeme " << log_comm << " found" << endl ;
	line_count++; 
	log_comm = ""; 
	BEGIN INDENT;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 598 "2005018.l"
{
	string curr(yytext);
	curr.pop_back(); 
	tokenout << "<CONST_INT, " << curr << ">\n";
	logout << "Line# " << line_count << ": Token <CONST_INT> Lexeme " << curr << " found\n";
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 606 "2005018.l"
{
	cout << "Redundant decimal points.\n"; 
	cout << yytext << "\n"; 
	logout << "Error at line# " << line_count << ": TOO_MANY_DECIMAL_POINTS " << yytext << "\n";
	error_count++;  
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 613 "2005018.l"
{
	cout << "Ill-formed number: ";
	cout << yytext << "\n"; 
	logout << "Error at line# " << line_count << ": ILLFORMED_NUMBER " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 621 "2005018.l"
{
	cout << "Multiple characters in character literal.\n";
	cout << yytext << "\n";  
	logout << "Error at line# " << line_count << ": MULTICHAR_CONST_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 628 "2005018.l"
{
	cout << "Unfinished character literal.\n";
	cout << yytext << "\n"; 
	logout << "Error at line# " << line_count << ": UNFINISHED_CONST_CHAR " << yytext << "\n";
	error_count++; 
	cout << "err " << error_count << "Line : " << line_count << "\n" ;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 636 "2005018.l"
{
	cout << "Unrecognized character literal.\n"; 
	logout << "Error at line# " << line_count << ": UNRECOGNIZED_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 642 "2005018.l"
{
	cout << "Unrecognized character literal.\n"; 
	logout << "Error at line# " << line_count << ": UNRECOGNIZED_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 648 "2005018.l"
{
	cout << "Unrecognized character literal.\n"; 
	logout << "Error at line# " << line_count << ": UNRECOGNIZED_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 654 "2005018.l"
{
	cout << "Unrecognized character literal.\n"; 
	logout << "Error at line# " << line_count << ": UNRECOGNIZED_CHAR " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 660 "2005018.l"
{
	logout << "Error at line# " << line_count << ": INVALID_ID_SUFFIX_NUM_PREFIX " << yytext << "\n";
	error_count++; 
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multi_state1):
case YY_STATE_EOF(comment1):
case YY_STATE_EOF(comment3):
case YY_STATE_EOF(comment4):
case YY_STATE_EOF(INDENT):
#line 666 "2005018.l"
{
	table.PrintAllScopeTables(logout);
	logout << "Total lines: " << line_count << "\n"; 
	logout << "Total errors: " << error_count << "\n"; 
	logout << "Total warnings: " << warning << "\n"; 
	exit(0); 
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 675 "2005018.l"
ECHO;
	YY_BREAK
#line 1893 "2005018.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 238 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 238 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 237);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 675 "2005018.l"


int main(int argc,char *argv[]){
	
	if(argc!=2){
		printf("Please provide input file name and try again\n");
		return 0;
	}
	
	fin=fopen(argv[1],"r");
	if(fin==NULL){
		printf("Cannot open specified file\n");
		return 0;
	}
	
	logout.open("2005018_log.txt");
	tokenout.open("2005018_token.txt");
	table.EnterScope(); 
	yyin= fin;
	yylex();
	fclose(yyin); 
	logout.close(); 
	tokenout.close(); 
	return 0;
}

