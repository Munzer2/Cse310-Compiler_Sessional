Line# 1: Token <INT> Lexeme int found
type_specifier  : INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier  : INT
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 2: Token <ID> Lexeme b found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 2: Token <ID> Lexeme c found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 2: Token <ID> Lexeme i found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var declaration
statements : statement
Line# 3: Token <ID> Lexeme b found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 3: Token <CONST_INT> Lexeme 0 found
factor  : CONST_INT
unary_expression : factor
term :  unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_satement
statements : statements statement
Line# 4: Token <ID> Lexeme c found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 4: Token <CONST_INT> Lexeme 1 found
factor  : CONST_INT
unary_expression : factor
term :  unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_satement
statements : statements statement
Line# 5: Token <FOR> Lexeme for found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 5: Token <CONST_INT> Lexeme 0 found
factor  : CONST_INT
unary_expression : factor
term :  unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <RELOP> Lexeme < found
variable : ID
factor  : variable
unary_expression : factor
term :  unary_expression
simple_expression : term
Line# 5: Token <CONST_INT> Lexeme 4 found
factor  : CONST_INT
unary_expression : factor
term :  unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression  : logic_expression
expression_statement : expression SEMICOLON
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <INCOP> Lexeme ++ found
variable : ID
factor : variable INCOP
unary_expression : factor
term :  unary_expression
Line# 5: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : logic_expression
Line# 5: Token <LCURL> Lexeme { found
Line# 6: Token <ID> Lexeme a found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <CONST_INT> Lexeme 3 found
factor  : CONST_INT
unary_expression : factor
term :  unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_satement
statements : statement
Line# 7: Token <WHILE> Lexeme while found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme a found
Line# 7: Token <INCOP> Lexeme -- found
variable : ID
factor : variable INCOP
unary_expression : factor
term :  unary_expression
Line# 7: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : logic_expression
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <ID> Lexeme b found
Line# 8: Token <INCOP> Lexeme ++ found
variable : ID
factor : variable INCOP
unary_expression : factor
term :  unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression  : simple_expression
logic_expression : rel_expression
expression  : logic_expression
expression_statement : expression SEMICOLON
statement : expression_satement
statements : statement
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	ScopeTable# 1.1
	1 --> (c,ID)
	2
	3
	4
	5
	6
	7 --> (i,ID)
	8
	9
	10 --> (a,ID)
	11 --> (b,ID)
	ScopeTable# 1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
statement : compound_satement
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	ScopeTable# 1.1
	1 --> (c,ID)
	2
	3
	4
	5
	6
	7 --> (i,ID)
	8
	9
	10 --> (a,ID)
	11 --> (b,ID)
	ScopeTable# 1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
statement : compound_satement
statement : FOR LPAREN expression statement expression statement expression RPAREN statement
statements : statements statement
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme a found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 12: Token <PRINTLN> Lexeme println found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <ID> Lexeme b found
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 13: Token <PRINTLN> Lexeme println found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <ID> Lexeme c found
Line# 13: Token <RPAREN> Lexeme ) found
Line# 13: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 14: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 1.1
	1 --> (c,ID)
	2
	3
	4
	5
	6
	7 --> (i,ID)
	8
	9
	10 --> (a,ID)
	11 --> (b,ID)
	ScopeTable# 1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total Lines: 15
Total Errors: 0
